# Nginx Reverse Proxy конфигурация для OPNsense
# Назначение: Безопасный HTTPS доступ к GL-AXT1800 Slate AX сервисам
# Расположение: OPNsense → Services → Nginx → Configuration

# ============================================================
# UPSTREAM СЕРВЕРЫ (Slate AX сервисы)
# ============================================================

upstream slate_ax_adguard {
    server 192.168.10.2:3000;
    keepalive 16;
}

upstream slate_ax_glinet_ui {
    server 192.168.10.2:80;
    keepalive 16;
}

upstream slate_ax_luci {
    server 192.168.10.2:81;
    keepalive 16;
}

# ============================================================
# RATE LIMITING
# ============================================================

# Ограничение запросов для защиты от DDoS
limit_req_zone $binary_remote_addr zone=slate_ax_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=slate_ax_login:10m rate=5r/m;

# ============================================================
# SSL CONFIGURATION
# ============================================================

# SSL параметры (общие для всех виртуальных хостов)
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
ssl_prefer_server_ciphers on;
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 10m;

# HSTS (HTTP Strict Transport Security)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

# Дополнительные security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;

# ============================================================
# ADGUARD HOME - adguard.home.local
# ============================================================

server {
    listen 443 ssl http2;
    server_name adguard.home.local;

    # SSL сертификаты (создать в OPNsense → System → Trust → Certificates)
    ssl_certificate /var/etc/acme-client/home/fullchain.cer;
    ssl_certificate_key /var/etc/acme-client/home/private.key;

    # Логирование
    access_log /var/log/nginx/adguard_access.log;
    error_log /var/log/nginx/adguard_error.log;

    # Rate limiting
    limit_req zone=slate_ax_limit burst=20 nodelay;

    location / {
        proxy_pass http://slate_ax_adguard;

        # Proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support для AdGuard Home
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Буферизация
        proxy_buffering off;
    }

    # API endpoints с более строгим rate limiting
    location ~ ^/(control|login) {
        limit_req zone=slate_ax_login burst=5 nodelay;

        proxy_pass http://slate_ax_adguard;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# HTTP → HTTPS redirect
server {
    listen 80;
    server_name adguard.home.local;
    return 301 https://$server_name$request_uri;
}

# ============================================================
# GL.INET WEB UI - router.home.local
# ============================================================

server {
    listen 443 ssl http2;
    server_name router.home.local;

    ssl_certificate /var/etc/acme-client/home/fullchain.cer;
    ssl_certificate_key /var/etc/acme-client/home/private.key;

    access_log /var/log/nginx/router_access.log;
    error_log /var/log/nginx/router_error.log;

    limit_req zone=slate_ax_limit burst=20 nodelay;

    location / {
        proxy_pass http://slate_ax_glinet_ui;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Login endpoint с жестким rate limiting
    location /cgi-bin/luci {
        limit_req zone=slate_ax_login burst=3 nodelay;

        proxy_pass http://slate_ax_glinet_ui;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

server {
    listen 80;
    server_name router.home.local;
    return 301 https://$server_name$request_uri;
}

# ============================================================
# OPENWRT LUCI - luci.home.local
# ============================================================

server {
    listen 443 ssl http2;
    server_name luci.home.local;

    ssl_certificate /var/etc/acme-client/home/fullchain.cer;
    ssl_certificate_key /var/etc/acme-client/home/private.key;

    access_log /var/log/nginx/luci_access.log;
    error_log /var/log/nginx/luci_error.log;

    limit_req zone=slate_ax_limit burst=20 nodelay;

    location / {
        proxy_pass http://slate_ax_luci;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # LuCI login с строгим rate limiting
    location /cgi-bin/luci/admin {
        limit_req zone=slate_ax_login burst=3 nodelay;

        proxy_pass http://slate_ax_luci;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

server {
    listen 80;
    server_name luci.home.local;
    return 301 https://$server_name$request_uri;
}

# ============================================================
# DEFAULT SERVER (отклонение неизвестных доменов)
# ============================================================

server {
    listen 80 default_server;
    listen 443 ssl http2 default_server;

    ssl_certificate /var/etc/acme-client/home/fullchain.cer;
    ssl_certificate_key /var/etc/acme-client/home/private.key;

    server_name _;

    # Возвращаем 444 (connection closed without response)
    return 444;
}

# ============================================================
# ИНСТРУКЦИЯ ПО НАСТРОЙКЕ В OPNSENSE
# ============================================================
#
# 1. Установите Nginx plugin:
#    System → Firmware → Plugins → os-nginx → Install
#
# 2. Создайте самоподписанный SSL сертификат:
#    System → Trust → Certificates
#    - Create Certificate Authority:
#      Name: Home Lab CA
#      Common Name: home.local
#
#    - Create Certificate:
#      Name: *.home.local
#      Common Name: *.home.local
#      Type: Server Certificate
#      Subject Alternative Names: DNS:*.home.local, DNS:home.local
#
# 3. Настройте Nginx через Web UI:
#    Services → Nginx → Configuration
#
#    HTTP(S) → Upstream Servers:
#    - Name: slate_ax_adguard
#      Server: 192.168.10.2:3000
#
#    - Name: slate_ax_glinet_ui
#      Server: 192.168.10.2:80
#
#    - Name: slate_ax_luci
#      Server: 192.168.10.2:81
#
#    HTTP(S) → HTTP Server:
#    - Создайте виртуальные хосты для каждого сервиса
#    - Укажите SSL сертификат
#    - Добавьте location правила
#
# 4. Добавьте DNS записи в AdGuard Home:
#    DNS Rewrites:
#    - adguard.home.local → 10.0.99.10 (OPNsense MGMT)
#    - router.home.local → 10.0.99.10
#    - luci.home.local → 10.0.99.10
#
# 5. Примените конфигурацию:
#    Services → Nginx → Apply
#
# 6. Проверьте статус:
#    Services → Nginx → Log Files
#
# ============================================================
# АЛЬТЕРНАТИВНЫЙ МЕТОД (через SSH на OPNsense)
# ============================================================
#
# Если нужно настроить через SSH/файлы:
#
# 1. SSH на OPNsense:
#    ssh root@10.0.99.10
#
# 2. Установите Nginx (если не установлен):
#    pkg install nginx
#
# 3. Создайте конфигурацию:
#    vi /usr/local/etc/nginx/opnsense.conf
#    # Скопируйте конфигурацию выше
#
# 4. Проверьте синтаксис:
#    nginx -t
#
# 5. Включите Nginx:
#    sysrc nginx_enable="YES"
#    service nginx start
#
# 6. Добавьте в firewall:
#    Firewall → Rules → LAN
#    Allow: LAN net → OPNsense MGMT:443 (HTTPS)
#
# ============================================================
# ИСПОЛЬЗОВАНИЕ
# ============================================================
#
# После настройки доступ к сервисам:
#
# - AdGuard Home: https://adguard.home.local
# - GL.iNet UI: https://router.home.local
# - OpenWRT LuCI: https://luci.home.local
#
# Все через HTTPS с единой точкой аутентификации и логирования!
#
# ============================================================
# МОНИТОРИНГ
# ============================================================
#
# Просмотр логов:
# tail -f /var/log/nginx/adguard_access.log
# tail -f /var/log/nginx/router_access.log
# tail -f /var/log/nginx/luci_access.log
#
# Статистика:
# grep "adguard.home.local" /var/log/nginx/adguard_access.log | wc -l
#
# ============================================================
