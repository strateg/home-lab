#!/usr/bin/env python3
"""
Claude Logger Agent
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Claude API —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ª–æ–∫–∞–ª—å–Ω–æ –≤ —Ñ–∞–π–ª—ã JSON –∏ Markdown.
"""

import os
import sys
import json
import argparse
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Optional

try:
    import anthropic
except ImportError:
    print("‚ùå –û—à–∏–±–∫–∞: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É anthropic")
    print("   pip install anthropic")
    sys.exit(1)


class ClaudeLogger:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å Claude API"""

    def __init__(self, api_key: Optional[str] = None, log_dir: str = "../../logs/claude-sessions"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞

        Args:
            api_key: API –∫–ª—é—á Anthropic (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ANTHROPIC_API_KEY –∏–∑ env)
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
        """
        self.api_key = api_key or os.getenv("ANTHROPIC_API_KEY")
        if not self.api_key:
            raise ValueError(
                "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!\n"
                "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export ANTHROPIC_API_KEY='your-key'\n"
                "   –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä --api-key"
            )

        self.client = anthropic.Anthropic(api_key=self.api_key)
        self.log_dir = Path(__file__).parent / log_dir
        self.log_dir.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        self.session_id = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.session_file = self.log_dir / f"session_{self.session_id}.json"
        self.markdown_file = self.log_dir / f"session_{self.session_id}.md"

        self.conversation: List[Dict] = []
        self.model = "claude-sonnet-4-20250514"  # –ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å Claude 3.5 Sonnet

        print(f"‚úÖ –°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞: {self.session_id}")
        print(f"üìÅ –õ–æ–≥–∏: {self.session_file}")
        print(f"üìÑ Markdown: {self.markdown_file}")
        print()

    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ JSON –∏ Markdown —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ JSON
        session_data = {
            "session_id": self.session_id,
            "started_at": self.session_id,
            "model": self.model,
            "conversation": self.conversation
        }

        with open(self.session_file, "w", encoding="utf-8") as f:
            json.dump(session_data, f, ensure_ascii=False, indent=2)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Markdown
        with open(self.markdown_file, "w", encoding="utf-8") as f:
            f.write(f"# Claude Session {self.session_id}\n\n")
            f.write(f"**Model:** {self.model}\n\n")
            f.write(f"**Started:** {self.session_id}\n\n")
            f.write("---\n\n")

            for i, exchange in enumerate(self.conversation, 1):
                timestamp = exchange.get("timestamp", "")
                prompt = exchange.get("prompt", "")
                response = exchange.get("response", "")

                f.write(f"## Interaction {i}\n\n")
                f.write(f"**Time:** {timestamp}\n\n")
                f.write(f"### üôã User Prompt\n\n")
                f.write(f"```\n{prompt}\n```\n\n")
                f.write(f"### ü§ñ Claude Response\n\n")
                f.write(f"{response}\n\n")
                f.write("---\n\n")

    def chat(self, prompt: str, system: Optional[str] = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –≤ Claude API –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ

        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –û—Ç–≤–µ—Ç Claude
        """
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        print(f"‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Claude...")

        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
            messages = [{"role": "user", "content": prompt}]

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            kwargs = {"model": self.model, "max_tokens": 4096, "messages": messages}
            if system:
                kwargs["system"] = system

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            message = self.client.messages.create(**kwargs)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            response = message.content[0].text

            # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            self.conversation.append({
                "timestamp": timestamp,
                "prompt": prompt,
                "response": response,
                "model": self.model,
                "system": system
            })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏
            self.save_logs()

            return response

        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            self.conversation.append({
                "timestamp": timestamp,
                "prompt": prompt,
                "response": error_msg,
                "error": True
            })
            self.save_logs()
            return error_msg

    def interactive_mode(self, system: Optional[str] = None):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å Claude"""
        print("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º Claude Logger")
        print("   –í–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        print("   –í–≤–µ–¥–∏—Ç–µ 'history' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏")
        print("   –í–≤–µ–¥–∏—Ç–µ 'clear' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        print()

        while True:
            try:
                # –ß–∏—Ç–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input("üôã –í—ã: ").strip()

                if not user_input:
                    continue

                # –ö–æ–º–∞–Ω–¥—ã
                if user_input.lower() in ["exit", "quit", "q"]:
                    print(f"\nüëã –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.session_file}")
                    break

                if user_input.lower() == "history":
                    print(f"\nüìú –ò—Å—Ç–æ—Ä–∏—è ({len(self.conversation)} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π):")
                    for i, exchange in enumerate(self.conversation, 1):
                        print(f"\n--- Interaction {i} ---")
                        print(f"Prompt: {exchange['prompt'][:100]}...")
                        print(f"Response: {exchange['response'][:100]}...")
                    print()
                    continue

                if user_input.lower() == "clear":
                    self.conversation.clear()
                    print("üóëÔ∏è  –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
                    continue

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude
                response = self.chat(user_input, system=system)

                # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç
                print(f"\nü§ñ Claude:\n{response}\n")

            except KeyboardInterrupt:
                print(f"\n\nüëã –°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.session_file}")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")


def main():
    parser = argparse.ArgumentParser(
        description="Claude Logger Agent - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å Claude API"
    )
    parser.add_argument(
        "--api-key",
        help="Anthropic API –∫–ª—é—á (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ANTHROPIC_API_KEY env variable)"
    )
    parser.add_argument(
        "--model",
        default="claude-sonnet-4-20250514",
        help="–ú–æ–¥–µ–ª—å Claude –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (default: claude-sonnet-4-20250514)"
    )
    parser.add_argument(
        "--system",
        help="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"
    )
    parser.add_argument(
        "--prompt",
        help="–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)"
    )
    parser.add_argument(
        "--log-dir",
        default="../../logs/claude-sessions",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ (default: ../../logs/claude-sessions)"
    )

    args = parser.parse_args()

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = ClaudeLogger(api_key=args.api_key, log_dir=args.log_dir)
        agent.model = args.model

        # –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        if args.prompt:
            response = agent.chat(args.prompt, system=args.system)
            print(response)
        else:
            agent.interactive_mode(system=args.system)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
